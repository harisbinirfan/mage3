<?php
/**
 * ObservPricing Observer
 *
 * @category   Tejar
 * @package    Tejar_ObservPricing
 * @class      Tejar_Observpricing_Model_Observer
 * @author     Zeeshan <zeeshan.zeeshan123@gmail.com>
 * @copyright  Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Tejar_Observpricing_Model_Observer extends Varien_Event_Observer
{

	const XML_PATH_PRODUCT_WEBHOOK_URL		          = 'catalog/webhook/product_url';

	const SWATCH_LABEL_SUFFIX = '-swatch';
	/*
	*@name        productSaveAfter
	*@description This Observer function calls another class function to return simple product price..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function simpleProductPrice(Varien_Event_Observer $observer){

		$event   = $observer->getEvent();
		$product = $event->getProduct();
		$qty     = $event->getQty();

		if($product->getTypeId()=="simple"){
			return false;
		}
		//Mage::log($observer, null, 'confPricing.log');
		//--- process percentage discounts only for simple products
		$selectedAttributes = array();
		if ($product->getCustomOption('attributes')) {
			//Mage::log('yes-----', null, 'confPricing.log');
			$selectedAttributes = unserialize($product->getCustomOption('attributes')->getValue());
		}
		if (sizeof($selectedAttributes)) return $this->getSimpleProductPrice($qty, $product);
	}

	/*
	*@name        getSimpleProductPrice
	*@description This function is called by the observer function simpleProductPrice
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function getSimpleProductPrice($qty=null, $product){
        $cfgId = $product->getId();
        $product->getTypeInstance(true)
            ->setStoreFilter($product->getStore(), $product);
        $attributes = $product->getTypeInstance(true)
            ->getConfigurableAttributes($product);
        $selectedAttributes = array();
        if ($product->getCustomOption('attributes')) {
            $selectedAttributes = unserialize($product->getCustomOption('attributes')->getValue());
        }
        $db = Mage::getSingleton('core/resource')->getConnection('core_read');
        $dbMeta = Mage::getSingleton('core/resource');
        $sql = <<<SQL
SELECT main_table.entity_id FROM {$dbMeta->getTableName('catalog/product')} `main_table` INNER JOIN
{$dbMeta->getTableName('catalog/product_super_link')} `sl` ON sl.parent_id = {$cfgId}
SQL;
        foreach($selectedAttributes as $attributeId => $optionId) {
            $alias = "a{$attributeId}";
            $sql .= ' INNER JOIN ' . $dbMeta->getTableName('catalog/product') . "_int" . " $alias ON $alias.entity_id = main_table.entity_id AND $alias.attribute_id = $attributeId AND $alias.value = $optionId AND $alias.entity_id = sl.product_id";
        }
        $id = $db->fetchOne($sql);
		//Mage::log(Mage::getModel("catalog/product")->load($id)->getFinalPrice($qty), null, 'confPricing.log');
        //return
		$fp = Mage::getModel("catalog/product")->load($id)->getFinalPrice($qty);
		return $product->setFinalPrice($fp);
	}
	
	public function adminhtmlCatalogProductEditPrepareForm($observer)
	{ 
		$event = $observer->getEvent();
		$form = $event->getForm();
		if (!Mage::registry('product')->getId()) {
			if ($form->getElement('sku')) {
				$autoGenerateSku = Mage::helper('tejarobservpricing')->getRandomSKU();
				$form->getElement('sku')->setValue($autoGenerateSku);
			}
		} 
		if ($form->getElement('sku')) {
			if(!$this->_isAllowedAction('mass_delete')){
				$form->getElement('sku')->setClass('disabled');
				$form->getElement('sku')->setReadonly(true, false);
			}
		}
		if ($form->getElement('model')) {
			$form->getElement('model')->setMaxlength(30);
		}
	}

		/**
	      * Event Product PrePare Save
	      *
	      * @var Tejar_Observpricing_Model_Observer catalogProductPrepareSave
	 	 *
	 	 * @return Product
	      */
	 	public function catalogProductPrepareSave(Varien_Event_Observer $observer){

	 		$event   = $observer->getEvent();
			$product = $event->getProduct();
			$request = $event->getRequest();
			$adminSession = Mage::getSingleton('admin/session');
			$user = $adminSession->getUser();
			$storeId = $product->getStore()->getStoreId();

			$data = array();

	 		$this->setProductSku($product);
	 		$this->setProductName($product);
			$this->setProductModel($product);
			// $this->setProductDimWeight($product);
			$this->setProductMediaGallery($product);
			$this->setProductCustomStock($product);

			$webhookURL = Mage::getStoreConfig(self::XML_PATH_PRODUCT_WEBHOOK_URL, $storeId);
            if($webhookURL){
				$data['action'] = "new";
				if($request->getParam('id')){
					$data['action'] = "edit";
				}
				$data['user'] = array(
					'userid'	=> $user->getUserId(),
					'username' => $user->getUsername(),
					'email' => $user->getEmail()
				);
				$mainProduct = Mage::getModel('catalog/product')->setStoreId($product->getStore()->getStoreId())->load($product->getId());
				if($product->getAttributeSetId()){
					$attributeSetModel = Mage::getModel("eav/entity_attribute_set");
					$attributeSetModel->load($product->getAttributeSetId());
					$attributeSetName  = $attributeSetModel->getAttributeSetName();
					$data['attributeSetName'] = $attributeSetName;	
				}
				if($product->getCategoryIds()){
					if($product->getCategoryIds() > 0){
						$categoriesIds = $product->getCategoryIds();
						$categoriesIds = array_merge($categoriesIds,$mainProduct->getCategoryIds());
						$collection = Mage::getResourceModel('catalog/category_collection');
						$nameId = $collection->getAttribute('name')->getAttributeId();
						$collection->getSelect(array('name'))
							->columns(array('name' => 'IF(at_name.value_id > 0, at_name.value, at_name_default.value)'))
							->joinInner(array('at_name_default' => 'catalog_category_entity_varchar'),"( `at_name_default`.`entity_id` = `e`.`entity_id` ) AND ( `at_name_default`.`attribute_id` = '".$nameId."' ) AND `at_name_default`.`store_id` = 0")
							->joinLeft(array('at_name' => 'catalog_category_entity_varchar'),"( `at_name`.`entity_id` = `e`.`entity_id` ) AND ( `at_name`.`attribute_id` = '".$nameId."' ) AND ( `at_name`.`store_id` = ". Mage::app()->getStore()->getId() ." )")
							->Where("e.entity_id IN(".join(',',$categoriesIds).")");
						$categories = array();
						foreach($collection as $item){
							$categories[$item->getId()] = $item->getName();
						}
						$data['categories'] = array();
						if($mainProduct->getCategoryIds() > 0){
							$data['categories']['before_update'] = array();
							foreach($mainProduct->getCategoryIds() as $mainCategotyId){
								$data['categories']['before_update'][$mainCategotyId] = $categories[$mainCategotyId];
							}
						}
						$data['categories']['updated'] = array();
						foreach($product->getCategoryIds() as $categotyId){
							$data['categories']['updated'][$categotyId] = $categories[$categotyId];
						}
					}
				}
				$attributes = $request->getPost('option_attr');
				$data['product'] = array();
				$postCollection = array();
				$origData = array();
				foreach($request->getPost('product') as $key => $item){
					$postCollection[$key] = $item;
					if(!is_array($item)){
						if(!empty($attributes) && in_array($key,$attributes)){
							$postCollection[$key."_value"] = $product->getAttributeText($key);
						}
					}
				}
				foreach($request->getPost('product') as $key => $item){
					if(!is_array($item)){
						$origData[$key] = $mainProduct->getData($key);
						if(!empty($attributes) && in_array($key,$attributes)){
							$origData[$key."_value"] = $mainProduct->getAttributeText($key);
						}
					} else if(is_array($item) && $key == "stock_data"){
						foreach($item as $k => $i){
							if($k == "is_in_stock"){
								$origData[$key][$k] = $mainProduct->getData($k);
							} else {
								$origData[$key][$k] = $mainProduct->getStockItem()->getData($k);
							}
						}
					} else if(is_array($item)){
						$origData[$key] = $mainProduct->getData($key);
					}
				}
				$postCollectionD = $postCollection;
				$origDataD = $origData;
				unset($postCollectionD['media_gallery']);
				unset($origDataD['media_gallery']);
				unset($postCollectionD['website_ids']);
				unset($origDataD['website_ids']);
				unset($postCollectionD['stock_data']);
				unset($origDataD['stock_data']);
				$result = array_diff_assoc($postCollectionD,$origDataD);
				$result2 = array_diff_assoc($postCollection['stock_data'],$origData['stock_data']);
				foreach($product->getData() as $pkey => $pData){
					$postCollection[$pkey] = $pData;
				}
				$origDataDiff = array();
				foreach($result as $k => $value){
					$origDataDiff[$k] = $origData[$k];
				}
				$origDataDiff['stock_data'] = $result2;
				$data['product']['before_update'] = $origDataDiff;
				$data['product']['updated'] = $postCollection;
				if($product->getTypeId() == "simple"){
					$parentIdArray = Mage::getModel('catalog/product_type_configurable')->getParentIdsByChild($product->getId());	
					if(!empty($parentIdArray)){
						$data['product']['updated']['type_id'] = "associate";
					}
				}
				$this->setProductWebhook($data,$product->getStore()->getStoreId());
		}
	 	}

		 		/**
	      * Event Product PrePare Save
	      *
	      * @var Tejar_Observpricing_Model_Observer catalogProductPrepareSave
	 	 *
	 	 * @return Product
	      */
		  public function catalogProductDeleteAfterDone(Varien_Event_Observer $observer){
			$event = $observer->getEvent();
			$product = $event->getProduct();
			$storeId = $product->getStore()->getStoreId();
			$webhookURL = Mage::getStoreConfig(self::XML_PATH_PRODUCT_WEBHOOK_URL, $storeId);
            if($webhookURL){
			$adminSession = Mage::getSingleton('admin/session');
			$user = $adminSession->getUser();
			$data = array();
			$data['action'] = "delete";
			$data['user'] = array(
				'userid'	=> $user->getUserId(),
				'username' => $user->getUsername(),
				'email' => $user->getEmail()
			);
			$data['product'] = $product->getData();
			$this->setProductWebhook($data,$product->getStore()->getStoreId());
		}
		}
		 /**
		 * post product 
		 *
		 * @param string product
		 * @return array
		 */
		public function setProductWebhook($data,$storeId = 0)
		{
			if(!empty($data)){
				$webhookURL = Mage::getStoreConfig(self::XML_PATH_PRODUCT_WEBHOOK_URL, $storeId);
				if($webhookURL){
				$data = json_encode($data);
				$ch = curl_init($webhookURL);
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array(
					'Content-Type: application/json',
					'Content-Length: ' . strlen($data))
				);
				$response = curl_exec($ch);
				$err = curl_error($ch);
				curl_close($ch);
			}
			}
		}

	 	 /**
	      * Set product Sku auto genrate
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	// public function setProductSku($product){

	 	// 	if(!$product->getSku()){
	 	// 		$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU());
	 	// 	}

	 	// 	return true;
		//  }
		 

		 	 	 /**
	      * Set product Sku auto genrate
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
		  public function setProductSku($product){
			if(!$this->_isAllowedAction('mass_delete')){
				if($product->getId()){
					$_product = Mage::getModel('catalog/product')->load($product->getId());
					if($product->getSku() != $_product->getSku()) {
						$product->setSku($_product->getSku());	
					}
				}
			} else {
				if($product->getSku() == "generate"){
					$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU());
				} 		
			}
			if(!$product->getSku()) {
				$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU());
			}	
	 		return true;
	 	}



	 	 /**
	      * Set product Name filter
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
				public function setProductName($product){
			 		// $name = preg_replace('/\s+/', ' ', $product->getName());
			 		// $name = preg_replace( '/[\x{200B}-\x{200D}]/u', '', $name);
					// $name = trim($name);
					$name = $product->getName();
			 		$productAttrLimit = Mage::getStoreConfig('intenso/product_page/product_name_attribute_limit');
			 		if($productAttrLimit){
			 			$name = mb_strimwidth($name , 0, $productAttrLimit, '', 'UTF-8');
			 		}
			 		if($product->getName()){
			 			$product->setName($name);
			 		}
			 	}

		/**
	      * Set product Model filter
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
				public function setProductModel($product){
					$model = $product->getModel();
					if($model){
						// $model = preg_replace('/\s+/', ' ', $model);
						// $model = preg_replace( '/[\x{200B}-\x{200D}]/u', '', $model);
						// $model = trim($model);
						$modelAttrLimit = Mage::getStoreConfig('intenso/product_page/product_model_attribute_limit');
						if($modelAttrLimit){
							$model = mb_strimwidth($model , 0, $modelAttrLimit, '', 'UTF-8');
						}
						$product->setModel($model);
					}
			 	}

				/**
	      * Set product Dim Weight filter
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	// public function setProductDimWeight($product){
	 	// 	$dimWeight = $product->getDimWeight();
		// 	if($dimWeight){
		// 		$dimWeight = preg_replace('/\s+/', ' ', $dimWeight);
		// 		$dimWeight = preg_replace( '/[\x{200B}-\x{200D}]/u', '', $dimWeight);
		// 		$dimWeight = trim($dimWeight);
		// 		$product->setDimWeight($dimWeight);
		// 	}
	 	// }

		/**
		 * Set Product MediaGallery filter
		 *
		 * @return Tejar_Observpricing_Model_Observer
		 */
		public function setProductMediaGallery($product){
			$defaultProductName = $product->getAttributeDefaultValue('name');
			$currentProductName = $product->getName()!=false?$product->getName():$defaultProductName;
			$currentProductName = $currentProductName!=false?$currentProductName:$product->getOrigData('name');
			$mediaGallery 		= $product->getMediaGallery('images');
			if($mediaGallery){
				$mediaGallery = Mage::helper('core')->jsonDecode($mediaGallery);
				foreach($mediaGallery as $key => $gallery){
					$matches = preg_grep('/'.self::SWATCH_LABEL_SUFFIX.'/i',array($mediaGallery[$key]['label']));
					if(empty($matches)){
						// CURRENT STORE LABEL UPDATE
						$position = "";
						if(array_key_exists('position',$mediaGallery[$key])){
							if((int)$mediaGallery[$key]['position'] > 1){
								$position = ' - ' . $mediaGallery[$key]['position'];
							}
							$mediaGallery[$key]['label'] = $currentProductName . $position;
						}
						// DEFAULT STORE LABEL UPDATE
						$position = "";
						if(array_key_exists('position_default',$mediaGallery[$key])){
							if((int)$mediaGallery[$key]['position_default'] > 1){
								$position = ' - ' . $mediaGallery[$key]['position'];
							}
							$mediaGallery[$key]['label_default'] = $defaultProductName . $position;
						}
					} else {
						// if(array_key_exists('label_default',$mediaGallery[$key])){
						// 	$mediaGallery[$key]['label'] = $mediaGallery[$key]['label_default'];
						// }
					}
				}
				$result = array('images' => Mage::helper('core')->jsonEncode($mediaGallery), 'values' => $product->getMediaGallery('values'));
				$product->setMediaGallery($result);
			}
		}

	 	 /**
	      * Set product custom stock
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	public function setProductCustomStock($product){

	 		$productCustomStockStatus = $product->getAttributeText('custom_stock_availability');
	 		$prodOrigData = $product->getOrigData();

	 		if($prodOrigData['stock_item']['use_config_manage_stock']!== null && trim($prodOrigData['stock_item']['use_config_manage_stock']) !== trim($product->getStockData('use_config_manage_stock'))){
	 			return $product->setCustomStockAvailability('');
	 		}

	 		//--- Set Stock Status in accordance with Custom Stock...
	 		if($product->getStockData('is_in_stock') && $productCustomStockStatus=="No Longer Available" || $productCustomStockStatus=="Discontinued") {
	 			$product->setStockData(array(
	             'use_config_manage_stock' => 0,
	             'is_in_stock' => 0,
	             'qty' => 0,
	             'manage_stock' => 1,
	             'use_config_notify_stock_qty' => 0
	 			));
	 		} elseif($product->getStockData('is_in_stock')==0 && $productCustomStockStatus=="Pre-order" || $productCustomStockStatus=="Backordered") {
	 			$product->setStockData(array(
	             'use_config_manage_stock' => 1,
	             'manage_stock' => 0,
	             'use_config_notify_stock_qty' => 1
	 			));
	 		}

	 		return true;
	 	}


	public function setDefaultSkuAndStock($product, $defaultStoreId){
		//--- Trim Product name to avoid Whitespaces issues..


		//--- Check if SKU is already set, Insert only if there is no SKU...
		if(!$product->getSku()){
			$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU())->save();
			//$product->getResource()->save($product);
		}
	}

	/*
	*@name        isCustomCostAvailable
	*@description This Observer function set prices per store based for currently inserted product..
	*@parameters  varchar StoreId
	*@returns     boolean
	*/
	public function isCustomCostAvailable($storeId){
		//--- Get Store Based Custom Cost and Custom Shipping Cost...
		$customCost = Mage::getStoreConfig('tejarobservpricing/store_custom_cost/custom_cost',$storeId);
		$customShippingCost = Mage::getStoreConfig('tejarobservpricing/store_custom_cost/custom_shipping_cost',$storeId);

		//--- if Custom Cost or Custom Shipping Cost is not available return false..
		if(!$customCost || !$customShippingCost){
			return false;
		}
		return true;
	}

	/**
     * Event Product Save After
     *
     * @var Tejar_Observpricing_Model_Observer catalogProductSaveAfter
	 *
	 * @return Product
     */
	public function catalogProductSaveAfter(Varien_Event_Observer $observer){

		$event 		    	 = 	$observer->getEvent();
		$product    		 = 	$event->getProduct();
		$productId			 =	$product->getId();
		$helper				 =	Mage::helper('tejarobservpricing');
		$storeCollection	 =	Mage::app()->getStores();
		$defaultStoreId		 = 	Mage::app()->getWebsite()->getDefaultGroup()->getDefaultStoreId();
		$defaultProduct 	 = 	Mage::getModel('catalog/product')->setStoreId($defaultStoreId)->load($productId);
		$defaultPrice		 =	$defaultProduct->getPrice();
		$defaultSpecialPrice = 	$defaultProduct->getSpecialPrice();
		$defaultListPrice  	 = 	$defaultProduct->getListPrice();


		if($defaultListPrice){
			Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), array("price"=> $defaultListPrice), $defaultStoreId);
		}

		//--- Loop through available Stores...
		foreach($storeCollection as $store){
			$storeId			=	$store->getStoreId();
			$storeCurrencyCode 	= 	$store->getBaseCurrency()->getCurrencyCode();
			$storeProduct		=	Mage::getModel('catalog/product')->setStoreId($storeId)->load($productId);
			$storePrice		 	=	$storeProduct->getPrice();
			$storeSpecialPrice 	= 	$storeProduct->getSpecialPrice();
			$storeListPrice    	= 	$storeProduct->getListPrice();
			$storeProductName	=	$storeProduct->getName();
			$storeListPriceFlag	=	$storeProduct->getExistsStoreValueFlag('list_price');
			$metaTitle			= 	$helper->getMetaTitle($store, $storeProductName);
			$metaDescription 	= 	$helper->getMetaDescription($store, $storeProductName);
			$object 			= 	new Varien_Object();
			// $object->setMetaTitle($metaTitle);
			// $object->setMetaDescription($metaDescription);

			$formulaPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultListPrice, $storeListPrice, $storeId, $storeCurrencyCode, $specialFormula = false);
			if($formulaPrice) $object->setPrice($formulaPrice);

			if($defaultSpecialPrice != null){
				$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
				if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
			} else {
				$object->setSpecialPrice(null);
			}


			if($storeSpecialPrice != null && $storeListPriceFlag == true){
				$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
				if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
			} elseif($storeSpecialPrice == null && $storeListPriceFlag == true){
				$object->setSpecialPrice(null);
			}

			Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), $object->getData() , $storeId);
		}

	}


	/*
	*@name        catalogProductAttributeUpdateBefore
	*@description On Mass action/Bulk Update for attributes, this Observer function set prices per store based for currently inserted product..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function catalogProductAttributeUpdateBefore(Varien_Event_Observer $observer){

		//Mage::log('HELLO WORLD!', null, 'confPricing.log');
			$block = $observer->getBlock();
		if($block instanceof Mage_Adminhtml_Block_Catalog_Product_Grid){

			/*$sets = Mage::getResourceModel('eav/entity_attribute_set_collection')
				->setEntityTypeFilter(Mage::getModel('catalog/product')->getResource()->getTypeId())
				->load()
				->toOptionHash();*/

			$block->getMassactionBlock()->addItem('observpricing_updateBulkPrices', array(
				'label'=> Mage::helper('catalog')->__('Update Pricing'),
				'url'  => $block->getUrl('*/*/updateBulkPrices', array('_current'=>true)),
				/*'additional' => array(
					'visibility' => array(
						'name' => 'attribute_set',
						'type' => 'select',
						'class' => 'required-entry',
						'label' => Mage::helper('catalog')->__('Attribute Set'),
						'values' => $sets
					)
				)*/
			));
		}
	}

	/*
	*@name        catalogProductMassupdatePricingBefore
	*@description On Mass action/Bulk Update for attributes, this Observer function set prices per store based
	              for currently inserted product..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function catalogProductMassupdateAttributeCustom(Varien_Event_Observer $observer){
		$event 		    		= 	$observer->getEvent();
		$productIds				=	$event->getProducts();
		$storeCollection		=	Mage::app()->getStores();
		$helper					=	Mage::helper('tejarobservpricing');
		$defaultStoreId		 	= 	Mage::app()->getWebsite()->getDefaultGroup()->getDefaultStoreId();
		foreach($productIds as $productId){
			$defaultProduct 	 	= 	Mage::getModel('catalog/product')->setStoreId($defaultStoreId)->load($productId);
			$defaultPrice		 	=	$defaultProduct->getPrice();
			$defaultSpecialPrice	= 	$defaultProduct->getSpecialPrice();
			$defaultListPrice  		= 	$defaultProduct->getListPrice();
			if($defaultListPrice){
				Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), array("price"=> $defaultListPrice), $defaultStoreId);
			}
			//--- Loop through available Stores...
			foreach($storeCollection as $store){
				$storeId			=	$store->getStoreId();
				$storeCurrencyCode 	= 	$store->getBaseCurrency()->getCurrencyCode();
				$storeProduct		=	Mage::getModel('catalog/product')->setStoreId($storeId)->load($productId);
				$storePrice		 	=	$storeProduct->getPrice();
				$storeSpecialPrice 	= 	$storeProduct->getSpecialPrice();
				$storeListPrice    	= 	$storeProduct->getListPrice();
				$storeProductName	=	$storeProduct->getName();
				$storeListPriceFlag	=	$storeProduct->getExistsStoreValueFlag('list_price');
				$metaTitle			= 	$helper->getMetaTitle($store, $storeProductName);
				$metaDescription 	= 	$helper->getMetaDescription($store, $storeProductName);
				$object 			= 	new Varien_Object();
				// $object->setMetaTitle($metaTitle);
				// $object->setMetaDescription($metaDescription);
				$formulaPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultListPrice, $storeListPrice, $storeId, $storeCurrencyCode, $specialFormula = false);
				if($formulaPrice) $object->setPrice($formulaPrice);
				if($defaultSpecialPrice != null){
					$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
					if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
				} else {
					$object->setSpecialPrice(null);
				}
				if($storeSpecialPrice != null && $storeListPriceFlag == true){
					$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
					if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
				} elseif($storeSpecialPrice == null && $storeListPriceFlag == true){
					$object->setSpecialPrice(null);
				}
				Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), $object->getData() , $storeId);
			}
		}
	}
	protected function _isAllowedAction($action)
    {
        return Mage::getSingleton('admin/session')->isAllowed('catalog/products/' . $action);
    }	
}
