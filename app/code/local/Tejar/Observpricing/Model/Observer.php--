<?php
/**
 * ObservPricing Observer
 *
 * @category   Tejar
 * @package    Tejar_ObservPricing
 * @class      Tejar_Observpricing_Model_Observer
 * @author     Zeeshan <zeeshan.zeeshan123@gmail.com>
 * @copyright  Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Tejar_Observpricing_Model_Observer extends Varien_Event_Observer
{

	const SWATCH_LABEL_SUFFIX = '-swatch';
	/*
	*@name        productSaveAfter
	*@description This Observer function calls another class function to return simple product price..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function simpleProductPrice(Varien_Event_Observer $observer){

		$event   = $observer->getEvent();
		$product = $event->getProduct();
		$qty     = $event->getQty();

		if($product->getTypeId()=="simple"){
			return false;
		}
		//Mage::log($observer, null, 'confPricing.log');
		//--- process percentage discounts only for simple products
		$selectedAttributes = array();
		if ($product->getCustomOption('attributes')) {
			//Mage::log('yes-----', null, 'confPricing.log');
			$selectedAttributes = unserialize($product->getCustomOption('attributes')->getValue());
		}
		if (sizeof($selectedAttributes)) return $this->getSimpleProductPrice($qty, $product);
	}

	/*
	*@name        getSimpleProductPrice
	*@description This function is called by the observer function simpleProductPrice
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function getSimpleProductPrice($qty=null, $product){
        $cfgId = $product->getId();
        $product->getTypeInstance(true)
            ->setStoreFilter($product->getStore(), $product);
        $attributes = $product->getTypeInstance(true)
            ->getConfigurableAttributes($product);
        $selectedAttributes = array();
        if ($product->getCustomOption('attributes')) {
            $selectedAttributes = unserialize($product->getCustomOption('attributes')->getValue());
        }
        $db = Mage::getSingleton('core/resource')->getConnection('core_read');
        $dbMeta = Mage::getSingleton('core/resource');
        $sql = <<<SQL
SELECT main_table.entity_id FROM {$dbMeta->getTableName('catalog/product')} `main_table` INNER JOIN
{$dbMeta->getTableName('catalog/product_super_link')} `sl` ON sl.parent_id = {$cfgId}
SQL;
        foreach($selectedAttributes as $attributeId => $optionId) {
            $alias = "a{$attributeId}";
            $sql .= ' INNER JOIN ' . $dbMeta->getTableName('catalog/product') . "_int" . " $alias ON $alias.entity_id = main_table.entity_id AND $alias.attribute_id = $attributeId AND $alias.value = $optionId AND $alias.entity_id = sl.product_id";
        }
        $id = $db->fetchOne($sql);
		//Mage::log(Mage::getModel("catalog/product")->load($id)->getFinalPrice($qty), null, 'confPricing.log');
        //return
		$fp = Mage::getModel("catalog/product")->load($id)->getFinalPrice($qty);
		return $product->setFinalPrice($fp);
    }

		/**
	      * Event Product PrePare Save
	      *
	      * @var Tejar_Observpricing_Model_Observer catalogProductPrepareSave
	 	 *
	 	 * @return Product
	      */
	 	public function catalogProductPrepareSave(Varien_Event_Observer $observer){

	 		$event   = $observer->getEvent();
	 		$product = $event->getProduct();

	 		$this->setProductSku($product);
	 		$this->setProductName($product);
			$this->setProductMediaGallery($product);
	 		$this->setProductCustomStock($product);

	 	}


	 	 /**
	      * Set product Sku auto genrate
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	public function setProductSku($product){

	 		if(!$product->getSku()){
	 			$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU());
	 		}

	 		return true;
	 	}



	 	 /**
	      * Set product Name filter
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	public function setProductName($product){

	 		$name = preg_replace('/\s+/', ' ', $product->getName());
	 		$name = preg_replace( '/[\x{200B}-\x{200D}]/u', '', $name);
	 		$productAttrLimit = Mage::getStoreConfig('intenso/product_page/product_name_attribute_limit');
	 		if($productAttrLimit){
	 			$name = rtrim(mb_strimwidth($name , 0, $productAttrLimit, '', 'UTF-8'));
	 		}
	 		if($product->getName()){
	 			$product->setName($name);
	 		}
	 	}

		/**
			 * Set Product MediaGallery filter
			 *
			 * @return Tejar_Observpricing_Model_Observer
			 */
		public function setProductMediaGallery($product){

			$defaultProductName = $product->getAttributeDefaultValue('name');
			$currentProductName = $product->getName()!=false?$product->getName():$defaultProductName;
			$mediaGallery 		= $product->getMediaGallery('images');
			if($mediaGallery){
				$mediaGallery = Mage::helper('core')->jsonDecode($mediaGallery);
				foreach($mediaGallery as $key => $gallery){
					$matches = preg_grep('/'.self::SWATCH_LABEL_SUFFIX.'/i',array($mediaGallery[$key]['label']));
					if(empty($matches)){

						// CURRENT STORE LABEL UPDATE
						$position = "";
						if((int)$mediaGallery[$key]['position'] > 1){
							$position = ' - ' . $mediaGallery[$key]['position'];
						}
						$mediaGallery[$key]['label'] = $currentProductName . $position;

						// DEFAULT STORE LABEL UPDATE
						$position = "";
						if((int)$mediaGallery[$key]['position_default'] > 1){
							$position = ' - ' . $mediaGallery[$key]['position'];
						}
						$mediaGallery[$key]['label_default'] = $defaultProductName . $position;

					}
				}

				$result = array('images' => Mage::helper('core')->jsonEncode($mediaGallery), 'values' => $product->getMediaGallery('values'));
				$product->setMediaGallery($result);
			}
		}

	 	 /**
	      * Set product custom stock
	      *
	      * @return Tejar_Observpricing_Model_Observer
	      */
	 	public function setProductCustomStock($product){

	 		$productCustomStockStatus = $product->getAttributeText('custom_stock_availability');
	 		$prodOrigData = $product->getOrigData();

	 		if($prodOrigData['stock_item']['use_config_manage_stock']!== null && trim($prodOrigData['stock_item']['use_config_manage_stock']) !== trim($product->getStockData('use_config_manage_stock'))){
	 			return $product->setCustomStockAvailability('');
	 		}

	 		//--- Set Stock Status in accordance with Custom Stock...
	 		if($product->getStockData('is_in_stock') && $productCustomStockStatus=="No Longer Available" || $productCustomStockStatus=="Discontinued") {
	 			$product->setStockData(array(
	             'use_config_manage_stock' => 0,
	             'is_in_stock' => 0,
	             'qty' => 0,
	             'manage_stock' => 1,
	             'use_config_notify_stock_qty' => 0
	 			));
	 		} elseif($product->getStockData('is_in_stock')==0 && $productCustomStockStatus=="Pre-order" || $productCustomStockStatus=="Backordered") {
	 			$product->setStockData(array(
	             'use_config_manage_stock' => 1,
	             'manage_stock' => 0,
	             'use_config_notify_stock_qty' => 1
	 			));
	 		}

	 		return true;
	 	}


	public function setDefaultSkuAndStock($product, $defaultStoreId){
		//--- Trim Product name to avoid Whitespaces issues..


		//--- Check if SKU is already set, Insert only if there is no SKU...
		if(!$product->getSku()){
			$product->setSku(Mage::helper('tejarobservpricing')->getRandomSKU())->save();
			//$product->getResource()->save($product);
		}
	}

	/*
	*@name        isCustomCostAvailable
	*@description This Observer function set prices per store based for currently inserted product..
	*@parameters  varchar StoreId
	*@returns     boolean
	*/
	public function isCustomCostAvailable($storeId){
		//--- Get Store Based Custom Cost and Custom Shipping Cost...
		$customCost = Mage::getStoreConfig('tejarobservpricing/store_custom_cost/custom_cost',$storeId);
		$customShippingCost = Mage::getStoreConfig('tejarobservpricing/store_custom_cost/custom_shipping_cost',$storeId);

		//--- if Custom Cost or Custom Shipping Cost is not available return false..
		if(!$customCost || !$customShippingCost){
			return false;
		}
		return true;
	}

	/**
     * Event Product Save After
     *
     * @var Tejar_Observpricing_Model_Observer catalogProductSaveAfter
	 *
	 * @return Product
     */
	public function catalogProductSaveAfter(Varien_Event_Observer $observer){

		$event 		    	 = 	$observer->getEvent();
		$product    		 = 	$event->getProduct();
		$productId			 =	$product->getId();
		$helper				 =	Mage::helper('tejarobservpricing');
		$storeCollection	 =	Mage::app()->getStores();
		$defaultStoreId		 = 	Mage::app()->getWebsite()->getDefaultGroup()->getDefaultStoreId();
		$defaultProduct 	 = 	Mage::getModel('catalog/product')->setStoreId($defaultStoreId)->load($productId);
		$defaultPrice		 =	$defaultProduct->getPrice();
		$defaultSpecialPrice = 	$defaultProduct->getSpecialPrice();
		$defaultListPrice  	 = 	$defaultProduct->getListPrice();


		if($defaultListPrice){
			Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), array("price"=> $defaultListPrice), $defaultStoreId);
		}

		//--- Loop through available Stores...
		foreach($storeCollection as $store){
			$storeId			=	$store->getStoreId();
			$storeCurrencyCode 	= 	$store->getBaseCurrency()->getCurrencyCode();
			$storeProduct		=	Mage::getModel('catalog/product')->setStoreId($storeId)->load($productId);
			$storePrice		 	=	$storeProduct->getPrice();
			$storeSpecialPrice 	= 	$storeProduct->getSpecialPrice();
			$storeListPrice    	= 	$storeProduct->getListPrice();
			$storeProductName	=	$storeProduct->getName();
			$storeListPriceFlag	=	$storeProduct->getExistsStoreValueFlag('list_price');
			$metaTitle			= 	$helper->getMetaTitle($store, $storeProductName);
			$metaDescription 	= 	$helper->getMetaDescription($store, $storeProductName);
			$object 			= 	new Varien_Object();
			$object->setMetaTitle($metaTitle);
			$object->setMetaDescription($metaDescription);

			$formulaPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultListPrice, $storeListPrice, $storeId, $storeCurrencyCode, $specialFormula = false);
			if($formulaPrice) $object->setPrice($formulaPrice);

			if($defaultSpecialPrice != null){
				$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
				if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
			} else {
				$object->setSpecialPrice(null);
			}


			if($storeSpecialPrice != null && $storeListPriceFlag == true){
				$formulaSpecialPrice = $helper->getFinalCost($storeProduct, $defaultProduct, $defaultSpecialPrice, $storeSpecialPrice, $storeId, $storeCurrencyCode, $specialFormula = true);
				if($formulaSpecialPrice) $object->setSpecialPrice($formulaSpecialPrice);
			} elseif($storeSpecialPrice == null && $storeListPriceFlag == true){
				$object->setSpecialPrice(null);
			}

			Mage::getSingleton('catalog/product_action')->updateAttributes(array($productId), $object->getData() , $storeId);
		}

	}


	/*
	*@name        catalogProductAttributeUpdateBefore
	*@description On Mass action/Bulk Update for attributes, this Observer function set prices per store based for currently inserted product..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function catalogProductAttributeUpdateBefore(Varien_Event_Observer $observer){

		//Mage::log('HELLO WORLD!', null, 'confPricing.log');
			$block = $observer->getBlock();
		if($block instanceof Mage_Adminhtml_Block_Catalog_Product_Grid){

			/*$sets = Mage::getResourceModel('eav/entity_attribute_set_collection')
				->setEntityTypeFilter(Mage::getModel('catalog/product')->getResource()->getTypeId())
				->load()
				->toOptionHash();*/

			$block->getMassactionBlock()->addItem('observpricing_updateBulkPrices', array(
				'label'=> Mage::helper('catalog')->__('Update Pricing'),
				'url'  => $block->getUrl('*/*/updateBulkPrices', array('_current'=>true)),
				/*'additional' => array(
					'visibility' => array(
						'name' => 'attribute_set',
						'type' => 'select',
						'class' => 'required-entry',
						'label' => Mage::helper('catalog')->__('Attribute Set'),
						'values' => $sets
					)
				)*/
			));
		}
	}

	/*
	*@name        catalogProductMassupdatePricingBefore
	*@description On Mass action/Bulk Update for attributes, this Observer function set prices per store based
	              for currently inserted product..
	*@parameters  Varien_Event_Observer
	*@returns     Object
	*/
	public function catalogProductMassupdateAttributeCustom(Varien_Event_Observer $observer){

		foreach($observer->products as $productId){

			//--- GET Base USD Price/Rate & Special Price...
			$productDefault   = Mage::getModel('catalog/product')->setStoreId(0)->load($productId);
			$usd_rate         = $productDefault->getPrice();
			$usd_specialPrice = $productDefault->getspecialPrice();

			//--- Trim Product name to avoid Whitespaces issues..
			$name = preg_replace('/\s+/', ' ', $productDefault->getName());
			$name = preg_replace( '/[\x{200B}-\x{200D}]/u', '', $name);
			Mage::getSingleton('catalog/product_action')->updateAttributes(array($productDefault->getId()),array('name'=>trim($name)));

			//--- Loop through available Stores...
			foreach(Mage::app()->getStores() as $store){

				$storeCurrencyCode = $store->getBaseCurrency()->getCurrencyCode();
				$storeId           = $store->getId();
				$product           = Mage::getModel('catalog/product')->setStoreId($storeId)->load($productId);
				$currentPrice = $product->getPrice();
				$currentSpecialPrice = $product->getspecialPrice();

				//--- Get Meta Title and Meta Descriptipon for current Product...
				$metaTitle         = Mage::helper('tejarobservpricing')->getMetaTitle($store, $product->getName());
				$metaDescription   = Mage::helper('tejarobservpricing')->getMetaDescription($store, $product->getName());

				Mage::app()->setCurrentStore(Mage_Core_Model_App::ADMIN_STORE_ID);

				################################## SET PRICES & SPECIAL PRICE #################################

				Mage::app()->setCurrentStore(Mage_Core_Model_App::ADMIN_STORE_ID);

				//--- Get Product Final Cost using helper function...
				$store_rate = Mage::helper('tejarobservpricing')->getFinalCost($product, $usd_rate, $currentPrice, $storeId, $storeCurrencyCode, $specialFormula = false);
				$calcAmount = $store_rate[0];

				if($usd_specialPrice!="" || $currentSpecialPrice!=""){
					$store_special_rate = Mage::helper('tejarobservpricing')->getFinalCost($product, $usd_specialPrice, $currentSpecialPrice ,$storeId, $storeCurrencyCode, $specialFormula = true);
					if($currentSpecialPrice == $store_special_rate[1] && ($currentSpecialPrice==null && $store_special_rate[1] == null) && $store_special_rate[2] == false){
						$store_special_rate[0] = null;
						$store_special_rate[3] = 1;
					}
				}

				//--- For Special Price...
				if($usd_specialPrice!="" || $usd_specialPrice != false){
					//--- Get Product Final Cost for Special Price using helper function...
					$calcSpecialAmount = $store_special_rate[0];
				}else{
					$calcSpecialAmount = $productDefault->getspecialPrice();
				}

				if($currentSpecialPrice!="" && ($store_special_rate[1] == $currentSpecialPrice)){
					$calcSpecialAmount = $store_special_rate[0];
				}

				if($calcSpecialAmount != "" && $calcAmount <= $calcSpecialAmount){
				    $calcSpecialAmount = "";
				}

				// function catalogProductMassupdateAttributeCustom
				//--- Update Attributes...
				if($product->getReset() == 0 || $store_rate[3] == 0 || ($store_special_rate[3] == 0 && $store_special_rate[3] != null)){
					Mage::getSingleton('catalog/product_action')
						->updateAttributes(array($product->getId()),array('price'=>$calcAmount, 'special_price'=>$calcSpecialAmount),$storeId);
				}

				//--- Update Attributes...
				$meta_enable = Mage::getStoreConfig('design/product_meta/meta_enable', $storeId);
				if($meta_enable){
					Mage::getSingleton('catalog/product_action')->updateAttributes(array($product->getId()),array('meta_title'=>$metaTitle, 'meta_description'=>$metaDescription),$storeId);
				}

			} //--- End foreach
		}
	}

}
