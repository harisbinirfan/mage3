<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     Mage_Catalog
 * @copyright  Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */


/**
 * Catalog Layer Price Filter resource model
 *
 * @category    Mage
 * @package     Mage_Catalog
 * @author      Magento Core Team <core@magentocommerce.com>
 */
class Tejar_Catalog_Model_Resource_Layer_Filter_Price extends Mage_Catalog_Model_Resource_Layer_Filter_Price
{

    /**
     * Retrieve clean select with joined price index table
     *
     * @param Mage_Catalog_Model_Layer_Filter_Price $filter
     * @return Varien_Db_Select
     */
    protected function _getSelect($filter)
    {

		if(is_null(Mage::registry('current_category')->getCollectionType()) || Mage::registry('current_category')->getCollectionType()==1){
			 return parent::_getSelect($filter);
		}

		$collection = $filter->getLayer()->getProductCollection();
		$collection->addPriceData($filter->getCustomerGroupId(), $filter->getWebsiteId());

		if (!is_null($collection->getCatalogPreparedSelect())) {
			$select = clone $collection->getCatalogPreparedSelect();
		} else {
			$select = clone $collection->getSelect();
		}

		// reset columns, order and limitation conditions
		$select->reset(Zend_Db_Select::COLUMNS);
		$select->reset(Zend_Db_Select::ORDER);
		$select->reset(Zend_Db_Select::LIMIT_COUNT);
		$select->reset(Zend_Db_Select::LIMIT_OFFSET);

		// remove join with main table
		$fromPart = $select->getPart(Zend_Db_Select::FROM);
		if (!isset($fromPart[Mage_Catalog_Model_Resource_Product_Collection::INDEX_TABLE_ALIAS])
			|| !isset($fromPart[Mage_Catalog_Model_Resource_Product_Collection::MAIN_TABLE_ALIAS])
		) {
			return $select;
		}

		$select->where($this->_getPriceExpression($filter, $select) . ' IS NOT NULL');

		return $select;

    }


    /**
     * Price expression generated by products collection
     *
     * @param Mage_Catalog_Model_Layer_Filter_Price $filter
     * @param Varien_Db_Select $select
     * @param bool $replaceAlias
     * @return string
     */
    protected function _getPriceExpression($filter, $select, $replaceAlias = true)
    {
		if(is_null(Mage::registry('current_category')->getCollectionType()) || Mage::registry('current_category')->getCollectionType()==1){
      $priceExpression = $filter->getLayer()->getProductCollection()->getPriceExpression($select);
     $additionalPriceExpression = $filter->getLayer()->getProductCollection()->getAdditionalPriceExpression($select);
     $result = empty($additionalPriceExpression)
       ? $priceExpression
       : "({$priceExpression} {$additionalPriceExpression})";
     if ($replaceAlias) {
       $result = $this->_replaceTableAlias($result);
     }
     return $result;
		}

		$priceExpression = $filter->getLayer()->getProductCollection()->getPriceExpression($select);
		$additionalPriceExpression = $filter->getLayer()->getProductCollection()->getAdditionalPriceExpression($select);

		$result = empty($additionalPriceExpression)
			? $priceExpression
			: "({$priceExpression} {$additionalPriceExpression})";
		if ($replaceAlias) {
			// $result = $this->_replaceTableAlias($result);
		}

		return $result;

    }

}
