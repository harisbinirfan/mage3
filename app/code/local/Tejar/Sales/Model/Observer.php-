<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     Mage_Sales
 * @copyright  Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Order Observer
 *
 * @category   Tejar
 * @package    Tejar_Sales
 * @author     Shariq Shahab <shariqshahab2@gmail.com>
 * @Code       3SD
 */


class Tejar_Sales_Model_Observer
{
	/**
	   * XML configuration paths
     */
    const XML_PATH_ORDER_WEBHOOK_ENABLED           	  = 'sales/webhook/order';
    const XML_PATH_ORDER_WEBHOOK_URL		          = 'sales/webhook/order_url';
    const XML_PATH_INVOICE_WEBHOOK_ENABLED            = 'sales/webhook/invoice';
    const XML_PATH_INVOICE_WEBHOOK_URL                = 'sales/webhook/invoice_url';
    const XML_PATH_SHIPMENT_WEBHOOK_ENABLED           = 'sales/webhook/shipment';
    const XML_PATH_SHIPMENT_WEBHOOK_URL               = 'sales/webhook/shipment_url';
	const XML_PATH_CREDITMEMO_WEBHOOK_ENABLED         = 'sales/webhook/creditmemo';
	const XML_PATH_CREDITMEMO_WEBHOOK_URL             = 'sales/webhook/creditmemo_url';
	const XML_PATH_TRACKING_WEBHOOK_URL            	  = 'sales/webhook/tracking_url';
	const XML_PATH_ORDER_TEMPLATE_ID           	 	  = 'sales_email/order/template_id';
	const XML_PATH_INVOICE_TEMPLATE_ID           	  = 'sales_email/invoice/template_id';
	const XML_PATH_SHIPMENT_TEMPLATE_ID           	  = 'sales_email/shipment/template_id';
	const XML_PATH_CREDITMEMO_TEMPLATE_ID        	  = 'sales_email/creditmemo/template_id';
	const XML_PATH_ORDER_CANCEL_TEMPLATE_ID   = 'sales_email/order_cancel/template_id';
	const XML_PATH_ORDER_MESSAGE_TEMPLATE           	   = 'sales_email/order/message_template';
	const XML_PATH_INVOICE_MESSAGE_TEMPLATE           	   = 'sales_email/invoice/message_template';
	const XML_PATH_ORDER_CANCEL_MESSAGE_TEMPLATE   = 'sales_email/order_cancel/message_template';
	const XML_PATH_SHIPMENT_MESSAGE_TEMPLATE           	   = 'sales_email/shipment/message_template';
	const XML_PATH_RETURN_MESSAGE_TEMPLATE           	   = 'sales_email/return/message_template';
	const XML_PATH_CREDITMEMO_MESSAGE_TEMPLATE        	   = 'sales_email/creditmemo/message_template';
	const XML_PATH_EXTRA_CONFIRMATION_MESSAGE_TEMPLATE     = 'sales_email/extra/confirmation_message_template';
	const XML_PATH_EXTRA_DELIVERED_MESSAGE_TEMPLATE        = 'sales_email/extra/delivered_message_template';
	const XML_PATH_SALES_API_LIVEPERSON_ACCOUNT_ID   	 = 'sales/api/live_person_account';
	const XML_PATH_SALES_API_LIVEPERSON_CLIENT_ID     	 = 'sales/api/live_person_client_id';
	const XML_PATH_SALES_API_LIVEPERSON_CLIENT_SECRET    = 'sales/api/live_person_client_secret';
	const XML_PATH_SALES_API_TWILIO_ACCOUNT_NUMBER		 = 'sales/api/twilio_account';
	const XML_PATH_SALES_API_TWILIO_ACCOUNT_SID		  	 = 'sales/api/twilio_account_sid';
	const XML_PATH_SALES_API_TWILIO_ACCOUNT_SECRET     	 = 'sales/api/twilio_auth_token';

	/**
     * Retrieve adminhtml session singleton
     *
     * @return Mage_Adminhtml_Model_Session
     */
    protected function _getSession()
    {
        return Mage::getSingleton('adminhtml/session');
    }

	 /**
     * post Order information
     *
     * @param string Order collection
     * @return array
     */
    public function setOrderWebhook(Varien_Event_Observer $observer)
    {
        $order = $observer->getEvent()->getOrder();
		$isEnabled = Mage::getStoreConfig(self::XML_PATH_ORDER_WEBHOOK_ENABLED, $order->getStoreId());
		$webhookURL = Mage::getStoreConfig(self::XML_PATH_ORDER_WEBHOOK_URL, $order->getStoreId());
		if($isEnabled){
			$api = Mage::getModel('sales/order_api');
			$data = $api->info($order->getIncrementId());
      $data["status_type"] = "Confirmation";
			$data = json_encode($data);
			$ch = curl_init($webhookURL);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				'Content-Type: application/json',
				'Content-Length: ' . strlen($data))
			);
			curl_exec($ch);
		}

		$templateId = Mage::getStoreConfig(self::XML_PATH_ORDER_TEMPLATE_ID, $order->getStoreId());
		if($templateId){
			$billingAddress = $order->getBillingAddress();
			$username = array(
				"firstname" => $billingAddress->getData('firstname'),
				"lastname" => $billingAddress->getData('lastname')
			);
			$username = join(" ", $username);
			$telephone = $billingAddress->getData('telephone');
			$phoneValidator = new Giggsey_Libphonenumber();
			$phoneUtil = $phoneValidator->call($telephone,$code);
			if($phoneUtil){
				if($phoneUtil->getNationalNumber()){
					$campaignName = "Order";
					$consumers = array();
					$consumers[] = array(
						"consumerCountryCode" => "{$phoneUtil->getCountryCode()}",
						"consumerPhoneNumber" => $phoneUtil->getNationalNumber(),
						"variables" => array(
							1 => $username,
							2 => $order->getStore()->formatPrice($order->getGrandTotal(), false),
							3 => $order->getIncrementId()
						)
					);
					$reponse = $this->postCampaign($order,$templateId,$campaignName,$consumers);
				} else {
					Mage::log(array($e,$telephone), null, 'phoneUtil.log');
				}
			}
		}
    }

	 /**
     * post Invoice information
     *
     * @param string Invoice collection
     * @return array
     */
	 public function setInvoiceWebhook(Varien_Event_Observer $observer)
    {
        $invoice = $observer->getEvent()->getInvoice();
        if(!$invoice->getSentDelayEmail() || $invoice->getSentDelayEmail() != 1){
      		$isEnabled = Mage::getStoreConfig(self::XML_PATH_INVOICE_WEBHOOK_ENABLED, $invoice->getStoreId());
      		$webhookURL = Mage::getStoreConfig(self::XML_PATH_INVOICE_WEBHOOK_URL, $invoice->getStoreId());
      		if($isEnabled){
      			$api = Mage::getModel('sales/order_invoice_api');
      			$data = $api->info($invoice->getIncrementId());

            if(isset($data['payment_method_code'])){
					  if(($data['payment_method_code'] == "cryozonic_stripe" || $data['payment_method_code'] == "stripe_payments") && $data['can_void_flag'] !== NULL){
						return false;
    					}
    				}

			$data["status_type"] = "Invoice";
			
			foreach($invoice->getOrder()->getAllItems() as $key => $item){
				if(isset($item['product_options'])){
					$product_options = @unserialize($item['product_options']);	
					if(isset($product_options['options'])){
						$data['items'][$key]['custom_options'] = $product_options['options'];
					}
				}
			}
			
      			$jsonData = json_encode($data);
      			$ch = curl_init($webhookURL);
      			curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      				'Content-Type: application/json',
      				'Content-Length: ' . strlen($jsonData))
      			);
      			curl_exec($ch);

      		}
		}
		$order = $invoice->getOrder();
		$templateId = Mage::getStoreConfig(self::XML_PATH_INVOICE_TEMPLATE_ID, $invoice->getStoreId());
		if($templateId){
			$billingAddress = $order->getBillingAddress();
			$username = array(
				"firstname" => $billingAddress->getData('firstname'),
				"lastname" => $billingAddress->getData('lastname')
			);
			$username = join(" ", $username);
			$telephone = $billingAddress->getData('telephone');
			$phoneValidator = new Giggsey_Libphonenumber();
			$phoneUtil = $phoneValidator->call($telephone);
			if($phoneUtil){
				if($phoneUtil->getNationalNumber()){
					$campaignName = "Invoice";
					$consumers = array();
					$consumers[] = array(
						"consumerCountryCode" => "{$phoneUtil->getCountryCode()}",
						"consumerPhoneNumber" => $phoneUtil->getNationalNumber(),
						"variables" => array(
							1 => $username,
							2 => $invoice->getStore()->formatPrice($invoice->getGrandTotal(), false),
							3 => $invoice->getIncrementId()
						)
					);
					$reponse = $this->postCampaign($invoice,$templateId,$campaignName,$consumers);
				} else {
					Mage::log(array($e,$telephone), null, 'phoneUtil.log');
				}
			}		
		}

    }

	 /**
     * post Shipment information
     *
     * @param string Shipment collection
     * @return array
     */
	public function setShipmentWebhook(Varien_Event_Observer $observer)
    {

		$shipment = $observer->getEvent()->getShipment();
		$request = Mage::app()->getRequest();
        if(!$shipment->getSentRatingEmail() || $shipment->getSentRatingEmail() != 1){
      		$isEnabled = Mage::getStoreConfig(self::XML_PATH_SHIPMENT_WEBHOOK_ENABLED, $shipment->getStoreId());
      		$webhookURL = Mage::getStoreConfig(self::XML_PATH_SHIPMENT_WEBHOOK_URL, $shipment->getStoreId());
      		if($isEnabled){
      			$api = Mage::getModel('sales/order_shipment_api');
      			$data = $api->info($shipment->getIncrementId());
			$data["status_type"] = "Shipment";
			$data["shipping_description"] = $shipment->getOrder()->getShippingDescription();
      			$data = json_encode($data);
      			$ch = curl_init($webhookURL);
      			curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      				'Content-Type: application/json',
      				'Content-Length: ' . strlen($data))
      			);
      			curl_exec($ch);
      		}
		}
		$order = $shipment->getOrder();
		$templateId = Mage::getStoreConfig(self::XML_PATH_SHIPMENT_TEMPLATE_ID, $shipment->getStoreId());
		if($templateId){
			$billingAddress = $order->getBillingAddress();
			$username = array(
				"firstname" => $billingAddress->getData('firstname'),
				"lastname" => $billingAddress->getData('lastname')
			);
			$username = join(" ", $username);
			$telephone = $billingAddress->getData('telephone');
			$phoneValidator = new Giggsey_Libphonenumber();
			$phoneUtil = $phoneValidator->call($telephone);
			if($phoneUtil){
				if($phoneUtil->getNationalNumber()){
					$campaignName = "Shipment";
					$consumers = array();
					$consumers[] = array(
						"consumerCountryCode" => "{$phoneUtil->getCountryCode()}",
						"consumerPhoneNumber" => $phoneUtil->getNationalNumber(),
						"variables" => array(
							1 => $username,
							2 => $shipment->getIncrementId()
						)
					);
					$reponse = $this->postCampaign($shipment,$templateId,$campaignName,$consumers);
				} else {
					Mage::log(array($e,$telephone), null, 'phoneUtil.log');
				}
			}		
		}
    }

	 /**
     * post credit memo information
     *
     * @param string credit memo collection
     * @return array
     */

	public function setCreditmemoWebhook(Varien_Event_Observer $observer)
    {
		$creditmemo = $observer->getEvent()->getCreditmemo();
		$isEnabled = Mage::getStoreConfig(self::XML_PATH_CREDITMEMO_WEBHOOK_ENABLED, $creditmemo->getStoreId());
		$webhookURL = Mage::getStoreConfig(self::XML_PATH_CREDITMEMO_WEBHOOK_URL, $creditmemo->getStoreId());
    if($creditmemo->getOrder()->getCustomerId()){
			foreach($creditmemo->getAllItems() as $item){
				if($item->getOrderItem()->getParentItem()) continue;
				$product = Mage::getModel('catalog/product')->load($item->getProductId());
				if(!$product->getIsInStock()){
					$model = Mage::getModel('productalert/stock')
						->setCustomerId($creditmemo->getCustomerId())
						->setProductId($product->getId())
						->setWebsiteId($creditmemo->getStore()->getWebsiteId());
					$model->save();
				}
			}
		}
		if($isEnabled){
			$api = Mage::getModel('sales/order_creditmemo_api');
			$data = $api->info($creditmemo->getIncrementId());
      $data["status_type"] = "Credit Memo";
			$data = json_encode($data);
			$ch = curl_init($webhookURL);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				'Content-Type: application/json',
				'Content-Length: ' . strlen($data))
			);
			curl_exec($ch);
		}
		$order = $creditmemo->getOrder();
		$templateId = Mage::getStoreConfig(self::XML_PATH_CREDITMEMO_TEMPLATE_ID, $creditmemo->getStoreId());
		if($templateId){
			$billingAddress = $order->getBillingAddress();
			$username = array(
				"firstname" => $billingAddress->getData('firstname'),
				"lastname" => $billingAddress->getData('lastname')
			);
			$username = join(" ", $username);
			$telephone = $billingAddress->getData('telephone');
			$phoneValidator = new Giggsey_Libphonenumber();
			$phoneUtil = $phoneValidator->call($telephone);
			if($phoneUtil){
				if($phoneUtil->getNationalNumber()){
					$campaignName = "Credit Memo";
					$consumers = array();
					$consumers[] = array(
						"consumerCountryCode" => "{$phoneUtil->getCountryCode()}",
						"consumerPhoneNumber" => $phoneUtil->getNationalNumber(),
						"variables" => array(
							1 => $username,
							2 => $creditmemo->getStore()->formatPrice($creditmemo->getGrandTotal(), false),
							3 => $creditmemo->getIncrementId()
						)
					);
					$reponse = $this->postCampaign($creditmemo,$templateId,$campaignName,$consumers);
				} else {
					Mage::log(array($e,$telephone), null, 'phoneUtil.log');
				}
			}		
		}
    }

    /**
     * post Order information
     *
     * @param string Order Cancel hook
     * @return array
     */
    public function setCancelWebhook(Varien_Event_Observer $observer)
    {
        $order = $observer->getEvent()->getOrder();
		$storeId = $order->getStore()->getStoreId();
		$zendDate = Zend_Date::now()->setLocale(Mage::getStoreConfig(Mage_Core_Model_Locale::XML_PATH_DEFAULT_LOCALE , $storeId))->setTimezone(Mage::getStoreConfig(Mage_Core_Model_Locale::XML_PATH_DEFAULT_TIMEZONE , $storeId));
		$currentDate = Mage::helper('core')->formatDate($zendDate , 'short', true);
		$currentDate = date('Y-m-d H:i:s',strtotime($currentDate));
		$isEnabled = Mage::getStoreConfig(self::XML_PATH_ORDER_WEBHOOK_ENABLED, $order->getStoreId());
		$webhookURL = Mage::getStoreConfig(self::XML_PATH_ORDER_WEBHOOK_URL, $order->getStoreId());
    if($order->getCustomerId()){
			foreach($order->getAllVisibleItems() as $item){
				if($item->getProductId()){
					$product = Mage::getModel('catalog/product')->load($item->getProductId());
					if(!$product->getIsInStock()){
						$model = Mage::getModel('productalert/stock')
							->setCustomerId($order->getCustomerId())
							->setProductId($product->getId())
							->setWebsiteId($order->getStore()->getWebsiteId());
						$model->save();
					}
				}
			}
		}
		if($isEnabled){
			$api = Mage::getModel('sales/order_api');
			$data = $api->info($order->getIncrementId());
			$data["status_type"] = "Canceled";
			$data["store_cancel_date"] = $currentDate;
      $data["order_increment_id"] = $order->getIncrementId();
			$data = json_encode($data);
			$ch = curl_init($webhookURL);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				'Content-Type: application/json',
				'Content-Length: ' . strlen($data))
			);
			curl_exec($ch);
			curl_close($ch);
		}

		$templateId = Mage::getStoreConfig(self::XML_PATH_ORDER_CANCEL_TEMPLATE_ID, $order->getStoreId());
		if($templateId){
			$billingAddress = $order->getBillingAddress();
			$username = array(
				"firstname" => $billingAddress->getData('firstname'),
				"lastname" => $billingAddress->getData('lastname')
			);
			$username = join(" ", $username);
			$telephone = $billingAddress->getData('telephone');
			$phoneValidator = new Giggsey_Libphonenumber();
			$phoneUtil = $phoneValidator->call($telephone,$code);
			if($phoneUtil){
				if($phoneUtil->getNationalNumber()){
					$campaignName = "Canceled";
					$consumers = array();
					$consumers[] = array(
						"consumerCountryCode" => "{$phoneUtil->getCountryCode()}",
						"consumerPhoneNumber" => $phoneUtil->getNationalNumber(),
						"variables" => array(
							1 => $username,
							2 => $order->getStore()->formatPrice($order->getGrandTotal(), false),
							3 => $order->getIncrementId()
						)
					);
					$reponse = $this->postCampaign($order,$templateId,$campaignName,$consumers);
				} else {
					Mage::log(array($e,$telephone), null, 'phoneUtil.log');
				}
			}
		}
	}

	public function setTrackingWebhook(Varien_Event_Observer $observer){
		$event = $observer->getEvent();
		$track = $event->getTrack();
		$trackingId = $track->getNumber();
		$shipment = $track->getShipment();
		$request = Mage::app()->getRequest();
		$carrier = $request->getParam('carrier');
		$order = $shipment->getOrder();
		$shippingDescription = $order->getShippingDescription();
		$webhookURL = Mage::getStoreConfig(self::XML_PATH_TRACKING_WEBHOOK_URL, $shipment->getStoreId());
		if($webhookURL){
			$adminSession 	= Mage::getSingleton('admin/session');
			$user 			= $adminSession->getUser();
			$data = array();
			$data['user'] = array(
				'userid'	=> $user->getUserId(),
				'username' => $user->getUsername(),
				'email' => $user->getEmail()
			);
			$data['action'] = "add";
			$data["shipment_increment_id"] = $shipment->getIncrementId();
			$data["order_increment_id"] = $order->getIncrementId();
			$data["shipping_description"] = $shippingDescription;
			$data["carriers"] = $track->getData();
			if($carrier == null){
				$data["send_tracking_info"] = true;
			}
			$jsonData = json_encode($data);
			$ch = curl_init($webhookURL);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				'Content-Type: application/json'
				)
			);
			$response = curl_exec($ch);
			$err = curl_error($ch);
			curl_close($ch);
		}
	}

	public function setTrackingDeleteWebhook(Varien_Event_Observer $observer){
		$event = $observer->getEvent();
		$track = $event->getTrack();
		$trackingId = $track->getNumber();
		$shipment = $track->getShipment();
		$order = $shipment->getOrder();
		$shippingDescription = $order->getShippingDescription();
		$webhookURL = Mage::getStoreConfig(self::XML_PATH_TRACKING_WEBHOOK_URL, $shipment->getStoreId());
		if($webhookURL){
			$adminSession 	= Mage::getSingleton('admin/session');
			$user 			= $adminSession->getUser();
			$data = array();
			$data['user'] = array(
				'userid'	=> $user->getUserId(),
				'username' => $user->getUsername(),
				'email' => $user->getEmail()
			);
			$data['action'] = "delete";
			$data["shipment_increment_id"] = $shipment->getIncrementId();
			$data["order_increment_id"] = $order->getIncrementId();
			$data["shipping_description"] = $shippingDescription;
			$data["carriers"] = $track->getData();
			$jsonData = json_encode($data);
			$ch = curl_init($webhookURL);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				'Content-Type: application/json'
				)
			);
			$response = curl_exec($ch);
			$err = curl_error($ch);
			curl_close($ch);
		}
	}
	
	
	
public function postCampaign($order, $templateId = null, $campaignName = null, $variables = array()){
		if($templateId && !empty($variables)){
			$storeId = $order->getStoreId();
			$livePersonAccountId = Mage::getStoreConfig(self::XML_PATH_SALES_API_LIVEPERSON_ACCOUNT_ID, $order->getStoreId());
			$url = "https://proactive-messaging.z1.fs.liveperson.com/api/v2/account/{$livePersonAccountId}/campaign";
			$zendDate = Zend_Date::now()->setLocale(Mage::getStoreConfig(Mage_Core_Model_Locale::XML_PATH_DEFAULT_LOCALE , $storeId))->setTimezone(Mage::getStoreConfig(Mage_Core_Model_Locale::XML_PATH_DEFAULT_TIMEZONE , $storeId));
			$whatsappNumber = Mage::getStoreConfig('intenso/contact/whatsapp_contact_number', $storeId);
			$whatsappWP = str_replace("+", "", $whatsappNumber);
			$hour = date("G", strtotime($zendDate));
			$day = strtoUpper(date("l", strtotime($zendDate)));
			$date = date("Y-m-d H:i:s", strtotime($zendDate));
			$fromMinute = date("i", strtotime($zendDate));
			$endMinute = date("i", (strtotime($zendDate)+(60*2)));
			$rCampaignName = $campaignName . ' ' . $date;
			$outboundNumber = $whatsappWP;
			$windows = array();
			$windows[] = array(
				"startTime" => array(
					"hour" => $hour,
					"minute" => $fromMinute
				),
				"endTime" => array(
					'hour' => $hour,
					'minute' => $endMinute
				),
				'day' => "{$day}",
			);
			$schedulingMetrics = array(
				"windows" => $windows
			);
			$campaign = array(
				"campaignName" => $rCampaignName,
				"skill" => "WhatsApp",
				"templateId" => $templateId,
				"outboundNumber" => $outboundNumber,
				"consumers" => $variables,
				"schedulingMetrics" => $schedulingMetrics,
				'consent' => true,
			);
			$jsonCampaign = json_encode($campaign);
			if($auth = $this->getAuthToken($order)){
				try {
					$ch = curl_init($url);
					curl_setopt($ch, CURLOPT_POST, true);
					curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonCampaign);
					curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
					curl_setopt($ch, CURLOPT_HTTPHEADER, array(
						"accept: application/json",
						"Authorization: {$auth}",
						"Content-Type: application/json"
						)
					);
					$response = curl_exec($ch);
					$err = curl_error($ch);
					curl_close($ch);
					$decode = Mage::helper('core')->jsonDecode($response);
					if(isset($decode['proactiveCampaignId']) && $decode['proactiveCampaignId']){
						$time = time();
						$proactiveCampaignId = $decode['proactiveCampaignId'];
						$output = shell_exec("php /usr/share/nginx/tejar/shell/msgresponse.php proactiveCampaignId {$proactiveCampaignId} auth {$auth} time {$time} object_type {$campaignName} object_id {$order->getId()} > /dev/null&");							
					}
					return $response;
				} catch (Mage_Core_Exception $e) {
					$this->_getSession()->addError($e->getMessage());
				} catch (Exception $e) {
					$this->_getSession()->addError($this->__('Unable to confirm the order.'));
					Mage::logException($e);
				}					
			} 
		}
	}
	protected function getAuthToken($order){
		$livePersonClientId = Mage::getStoreConfig(self::XML_PATH_SALES_API_LIVEPERSON_CLIENT_ID, $order->getStoreId());
		$livePersonClientSecret = Mage::getStoreConfig(self::XML_PATH_SALES_API_LIVEPERSON_CLIENT_SECRET, $order->getStoreId());
		if($livePersonClientId && $livePersonClientSecret){
			try {
				$clientSentine = "client_id={$livePersonClientId}&client_secret={$livePersonClientSecret}";
				$apiSentinelUrl = "https://va.sentinel.liveperson.net/sentinel/api/account/85633532/app/token?v=1.0&grant_type=client_credentials";
				$ch = curl_init($apiSentinelUrl);
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $clientSentine);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array(
					'Content-Type: application/x-www-form-urlencoded'
					)
				);
				$response = curl_exec($ch);
				$err = curl_error($ch);
				curl_close($ch);
				if(!$err){
					$result = json_decode($response);
					return $result->access_token;
				} else {
					return null;
				}
			} catch (Mage_Core_Exception $e) {
                $this->_getSession()->addError($e->getMessage());
            } catch (Exception $e) {
                $this->_getSession()->addError($this->__('Unable to get livePerson Auth.'));
                Mage::logException($e);
            }
		}
		return null;
	}
	public function getResponseMessage($auth, $proactiveCampaignId, $type, $id){
		if($type == "Order" || $type == "Canceled" || $type == "Return Products" || $type == "Confirmation"){
			$order = Mage::getModel('sales/order')->load($id);
			if($type == "Order"){
				$templateText = Mage::getStoreConfig(self::XML_PATH_ORDER_MESSAGE_TEMPLATE, $order->getStoreId());
			} else if($type == "Canceled"){
				$templateText = Mage::getStoreConfig(self::XML_PATH_ORDER_CANCEL_MESSAGE_TEMPLATE, $order->getStoreId());
			} else if($type == "Return Products"){
				$templateText = Mage::getStoreConfig(self::XML_PATH_RETURN_MESSAGE_TEMPLATE, $order->getStoreId());
			} else if($type == "Confirmation"){
				$templateText = Mage::getStoreConfig(self::XML_PATH_EXTRA_CONFIRMATION_MESSAGE_TEMPLATE, $order->getStoreId());
			}
		} else if($type == "Invoice"){
			$order = Mage::getModel('sales/order_invoice')->load($id);
			$templateText = Mage::getStoreConfig(self::XML_PATH_INVOICE_MESSAGE_TEMPLATE, $order->getStoreId());
		} else if($type == "Shipment" || $type == "Delivered"){
			$order = Mage::getModel('sales/order_shipment')->load($id);
			if($type == "Delivered"){
				$templateText = Mage::getStoreConfig(self::XML_PATH_EXTRA_DELIVERED_MESSAGE_TEMPLATE, $order->getStoreId());
			} else {
				$templateText = Mage::getStoreConfig(self::XML_PATH_SHIPMENT_MESSAGE_TEMPLATE, $order->getStoreId());
			}
		} else if($type == "Credit Memo"){
			$order = Mage::getModel('sales/order_creditmemo')->load($id);
			$templateText = Mage::getStoreConfig(self::XML_PATH_CREDITMEMO_MESSAGE_TEMPLATE, $order->getStoreId());
		} 
		try {
			$billingAddress = $order->getBillingAddress();
			$telephone = $billingAddress->getData('telephone');
			$url = "https://proactive-messaging.z1.fs.liveperson.com/api/v2/account/85633532/campaign/{$proactiveCampaignId}/conversations";
			$ch = curl_init($url);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array(
				"accept: application/json",
				"Authorization: {$auth}",
				"Content-Type: application/json"
				)
			);
			$response = curl_exec($ch);
			$err = curl_error($ch);
			curl_close($ch);
			$decode = Mage::helper('core')->jsonDecode($response);		
			if($decode["campaignStatus"] == "FINISHED"){
				$this->postMessage($order,$templateText);
				Mage::log($telephone . " => " . $response, null, 'message.log');
			} else {
				Mage::log($telephone . " => " . $response, null, 'message.log');
			}
		} catch (Mage_Core_Exception $e) {
                $this->_getSession()->addError($e->getMessage());
		} catch (Exception $e) {
                $this->_getSession()->addError($this->__('Unable to confirm the order.'));
                Mage::logException($e);
		}
	}
		public function postMessage($order,$templateText){
		$twilioNumber = Mage::getStoreConfig(self::XML_PATH_SALES_API_TWILIO_ACCOUNT_NUMBER, $order->getStoreId());
		$twilioAccountSID = Mage::getStoreConfig(self::XML_PATH_SALES_API_TWILIO_ACCOUNT_SID, $order->getStoreId());
		$twilioAccountSecret = Mage::getStoreConfig(self::XML_PATH_SALES_API_TWILIO_ACCOUNT_SECRET, $order->getStoreId());
		if($twilioNumber && $twilioAccountSID && $twilioAccountSecret && $templateText){
			try {
				$billingAddress = $order->getBillingAddress();
				$telephone = $billingAddress->getData('telephone');
				$phoneValidator = new Giggsey_Libphonenumber();
				$phoneUtil = $phoneValidator->call($telephone);
				if($phoneUtil){
					if($phoneUtil->getNationalNumber()){
						$emailTemplate = Mage::getModel('core/email_template');
						$variables = array(
							'order' => $order
						);
						if (!isset($variables['store'])) {
							$variables['store'] = Mage::app()->getStore($order->getStoreId());
						}
						$defaultValuesMap = array(
							"logo_width" => $emailTemplate::XML_PATH_DESIGN_EMAIL_LOGO_WIDTH,
							"logo_height" => $emailTemplate::XML_PATH_DESIGN_EMAIL_LOGO_HEIGHT,
							"phone" => Mage_Core_Model_Store::XML_PATH_STORE_STORE_PHONE,
							"store_phone" => Mage_Core_Model_Store::XML_PATH_STORE_STORE_PHONE,
							"store_hours" => Mage_Core_Model_Store::XML_PATH_STORE_STORE_HOURS,
							"store_email" => Mage_Customer_Helper_Data::XML_PATH_SUPPORT_EMAIL,
						);
						foreach ($defaultValuesMap as $variableName => $configValue) {
							if (!isset($variables[$variableName])) {
								$variables[$variableName] = Mage::getStoreConfig($configValue, $storeId);
							}
						}
						$processor = $emailTemplate->getTemplateFilter();
						$processor->setUseSessionInUrl(false)->setPlainTemplateMode(1);
						$processor->setTemplateProcessor(array($emailTemplate, 'getTemplateByConfigPath'))
						->setIncludeProcessor(array($emailTemplate, 'getInclude'))
						->setVariables($variables);
						$result = $processor->filter($templateText);
						$payload = array(
							"Body" => "{$result}",
							"From" => "{$twilioNumber}",
							"StatusCallback" => "http://postb.in/1234abcd",
							"To" => $telephone
						);
						$TWILIO_ACCOUNT_SID = "{$twilioAccountSID}";
						$AUTH_TOKEN = "{$twilioAccountSecret} ";
						$url = "https://api.twilio.com/2010-04-01/Accounts/{$TWILIO_ACCOUNT_SID}/Messages.json";
						$ch = curl_init($url);
						curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
						curl_setopt($ch, CURLOPT_POST, 1);
						curl_setopt($ch, CURLOPT_USERPWD, $TWILIO_ACCOUNT_SID . ':' . $AUTH_TOKEN);
						curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payload));
						curl_setopt($ch, CURLOPT_HTTPHEADER, array(
							"Content-Type: application/x-www-form-urlencoded"
							)
						);
						$response = curl_exec($ch);
						$err = curl_error($ch);
						curl_close($ch);
						if($err){
							Mage::log($telephone . ' => ' . $err, null, 'message.log');
						}
						return $response;
					}
					Mage::log($telephone . ' => ' . $response, null, 'message.log');
					return null;
				}
				Mage::log($telephone . ' => ' . "phoneUtil is not work", null, 'message.log');
				return null;
			} catch (Mage_Core_Exception $e) {
                $this->_getSession()->addError($e->getMessage());
            } catch (Exception $e) {
                $this->_getSession()->addError($this->__('Unable to confirm the order.'));
                Mage::logException($e);
            }
		} else {
			return null;
		}
	}

}
