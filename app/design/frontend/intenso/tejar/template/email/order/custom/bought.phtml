<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
/**
 * @var $this Mage_Sales_Block_Order_Totals
 * @see Mage_Sales_Block_Order_Totals
 */
?>
<?php $_order = $this->getOrder() ?>
<?php $itemIds = array();
$products = array(); 
$parentIds = array();
?>
<?php foreach($_order->getAllItems() as $item): ?>
<?php        
		
		$product = $item;
		$productId = $product->getProductId();
		$itemIds[] = $productId;
		
        if ($product && $product->getProductId()) {
            $product = Mage::getModel('catalog/product')->load($product->getProductId());
			$parentProductIds  =  Mage::getModel('catalog/product_type_configurable')->getParentIdsByChild($productId);
			if(!empty($parentProductIds)){
				$parentIds = array_merge($parentIds,$parentProductIds); 
			}
        }
		
		/* @var $orderCollection Mage_Sales_Model_Mysql4_Order_Collection */
        $orderCollection = Mage::getModel('sales/order')->getCollection();
        $orderStatus = Mage::helper('mageworx_alsobought')->getOrderStatus();
        $sortOrder = Mage::helper('mageworx_alsobought')->getSortOrder();
        $orderCollection->addAttributeToFilter('status', array('in' => array($orderStatus)));
        if (method_exists($orderCollection->getResource(), 'getMainTable')) {
            $mainTable = $orderCollection->getResource()->getMainTable();
        } else {
            $mainTable = $orderCollection->getEntity()->getEntityTable();
        }
        if (false !== strpos($mainTable, 'flat')) {
            $mainTableAlias = 'main_table';
        } else {
            $mainTableAlias = 'e';
        }

        if ($product->getTypeId() == 'grouped') {
            $children = Mage::getSingleton('catalog/product_type_grouped')->getChildrenIds($product->getId());
            foreach ($children as $group) {
                $ids[] = implode(',', array_keys($group));
            }
            $cond1 = 'items1.product_id IN (' . implode(',', $ids) . ')';
            $cond2 = 'items2.product_id NOT IN (' . implode(',', $ids) . ')';
			
		} elseif($product->getTypeId() == "configurable"){
			
			$configurable = Mage::getModel('catalog/product_type_configurable')->setProduct($product);
			$simple_collection = $configurable->getUsedProductCollection()->addAttributeToSelect('entity_id')->addFilterByRequiredOptions();
			$productIds = $simple_collection->getResource()->getReadConnection()->fetchCol($simple_collection->getSelect());
			
			$cond3 = array();
			foreach($productIds as $row){
				$cond3[] = '(items1.product_id=' . $row .')';
			}
			
			$cond3 = join($cond3, ' OR ');
			
			
			$cond1 = '(items1.product_id=' . $product->getId() . ')';
            $cond2 = '(items2.product_id <> ' . $product->getId() . ')';
			
			$cond1 = join(array($cond1,$cond3), ' OR ');
			
			
        } else {
            $cond1 = 'items1.product_id=' . $product->getId();
            $cond2 = 'items2.product_id <> ' . $product->getId();
        }
       
	    $select = $orderCollection->getSelect()->reset('columns')->join(
            array('items1' => Mage::getResourceSingleton('sales/order_item')->getMainTable()),
            $mainTableAlias . '.entity_id=items1.order_id AND ' . $cond1, '')
                ->join(
            array('items2' => Mage::getResourceSingleton('sales/order_item')->getMainTable()),
            'items1.order_id = items2.order_id AND ' . $cond2,
            array('product_id' => 'items2.product_id', 'items_count' => new Zend_Db_Expr('COUNT(items2.product_id)')))
                ->group('items2.product_id')
                ->order($sortOrder == 1 ? 'items_count DESC' : 'RAND()');

        $products = array_merge($products,$orderCollection->getResource()->getReadConnection()->fetchCol($select)); 
?>
<?php endforeach; ?>
<?php if(count($products) > 0): ?>
<?php 
		$collection = Mage::getModel('catalog/product')->getCollection();
		$collection->addAttributeToFilter('entity_id', array('in' => $products));
		$collection->getSelect()->joinLeft(array('parent_product' => $collection->getTable('catalog/product_super_link')),'(e.entity_id = parent_product.product_id)');
			
		$productIds = "";
		foreach ($collection->getConnection()->fetchAll($collection->getSelect()) as $row) {
			
			if(array_key_exists("parent_id",$row)){
				
				if(in_array($row['parent_id'],$parentIds)){
					continue;
				}
				
				$productIds[] = $row['parent_id'];
			} else {
				$productIds[] = $row['entity_id'];
			}
		}
			
			
		$collection = Mage::getModel('catalog/product')->getCollection();
		$collection->addAttributeToSelect(Mage::getSingleton('catalog/config')->getProductAttributes());
		$collection->addAttributeToFilter('entity_id', array('in' => $productIds));
		$collection->getSelect()->order('RAND()');
		$collection->setPageSize(2);
		$collection->setCurPage(1);

				
		Mage::getSingleton('catalog/product_visibility')->addVisibleInCatalogFilterToCollection($collection);
		Mage::getSingleton('cataloginventory/stock')->addInStockFilterToCollection($collection); 
	
?>
<?php if($collection->getSize() > 0): ?>
<tr>
	<td style="padding-top: 0; padding-bottom: 0;" width="100%" class="wrapper-padding">
		<div style="background-color:rgb(214,214,214);font-size:1px;height:1px"></div>
	</td>
</tr>
<tr>
	<td class="item-container" valign="top">
		<table border="0" align="left" cellpadding="0" cellspacing="0" width="100%">
			<tbody>
				<tr> 
					<h5 style="margin-bottom: 10px; margin-top: 0;">Customers Who Bought Items in Your Order Also Bought</h5>
				</tr>				
			</tbody>
		</table>
	</td>
</tr>
<tr>
	<td class="item-container" valign="top">
		<table border="0" align="left" cellpadding="0" cellspacing="0" width="100%">
			<tbody>
				<tr> 
<?php foreach($collection as $item): ?>

<?php $_item = $item; 

	// /*--------------------------------------------------------*/
	// /* 3SD CODE ASSOCIATE PRODUCT NAME */
	// if($_item->getSku() == ''){
	// 	$configItemId = Mage::getModel('catalog/product')->load($_item->getId()) ;
	// }
	// else{
	// 	$configItemId = Mage::getModel('catalog/product')->loadByAttribute('sku', $_item->getSku());
	// }
	// /*--------------------------------------------------------*/

	// if($configItemId == null){

	// 	$productImg = Mage::getModel('catalog/product')->setStoreId(Mage::app()->getStore()->getStoreId())->load($_item->getProductId());
	// 	// $productImageUrl = Mage::getSingleton('catalog/product_media_config')->getBaseMediaUrl(). '/placeholder/' .Mage::getStoreConfig("catalog/placeholder/small_image_placeholder");
	// 	// $productImageUrl = $this->helper('catalog/image')->init($productImg, 'thumbnail')->resize(150);
	// 	$productImageUrl = Mage::getModel('catalog/product_media_config')->getMediaUrl($productImg->getThumbnail());
	// 	$productName = $this->escapeHtml($_item->getName());
	// 	$productUrl = "javascript:void(0)";

	// } else {

	// 	$configItem = Mage::getModel('catalog/product')->loadByAttribute('sku', $_item->getSku());
	// 	$product = Mage::getModel('catalog/product')->setStoreId(Mage::app()->getStore()->getId())->load($_item->getProductId());
	// 	//--- To avoid 404 issue in configurable/simple products (related ot visibility)
	// 	if($product->getTypeId()=="simple"){
	// 		$parentProducts =  Mage::getModel('catalog/product_type_configurable')->getParentIdsByChild($configItemId->getId());
	// 		if(!empty($parentProducts)){
	// 			$product = Mage::getModel('catalog/product')->load($parentProducts[0]);
	// 		}
	// 	}

	// 	//--- GET Product Image Url (Following Admin Check: Configurable Product Image)
	// 	// $productImageUrl = Mage::getStoreConfig('checkout/cart/configurable_product_image')==="parent"?$this->helper('catalog/image')->init($product, 'thumbnail')->resize(150):$this->helper('catalog/image')->init($configItem, 'thumbnail')->resize(150);
	// 	$productImageUrl = Mage::getStoreConfig('checkout/cart/configurable_product_image')==="parent"?Mage::getModel('catalog/product_media_config')->getMediaUrl($product->getThumbnail()):Mage::getModel('catalog/product_media_config')->getMediaUrl($configItem->getThumbnail());
	// 	$productName = $this->escapeHtml($configItemId->getName());
	// 	$productUrl = $product->getProductUrl();
	// }

	$cartThumbnailConfig = Mage::getStoreConfig('checkout/cart/configurable_product_image');
	$product = Mage::getModel('catalog/product')->load($_item->getId());
	$productImageUrl = $this->helper('catalog/image')->init($product, 'thumbnail')->resize(150);
	$productUrl = $product->getProductUrl();
	$productName = $this->escapeHtml($_item->getName());
	if($_item->getProductType() == "configurable"){
		if($cartThumbnailConfig==="itself"){
			if($_item->getSku() != ''){
				$childProduct = Mage::getModel('catalog/product')->loadByAttribute('sku', $_item->getSku());
				$productImageUrl = $this->helper('catalog/image')->init($childProduct, 'thumbnail')->resize(150);				
			} else if($options = $_item->getProductOptions()) {
				if(array_key_exists('info_buyRequest',$options)){
					if(array_key_exists('super_attribute',$options['info_buyRequest'])){
						$childProduct = Mage::getModel('catalog/product_type_configurable')->getProductByAttributes($options['info_buyRequest']['super_attribute'], $product);
						$childProduct = Mage::getModel('catalog/product')->load($childProduct->getId());
						$productImageUrl = $this->helper('catalog/image')->init($childProduct, 'thumbnail')->resize(150);
					}
				}
			}
		}
	}
	if($_item->getProductType() == "simple"){
		if(!$product->isVisibleInSiteVisibility()){
			$parentProducts =  Mage::getModel('catalog/product_type_configurable')->getParentIdsByChild($_item->getProductId());
			if(!empty($parentProducts)){
				$parentProduct = Mage::getModel('catalog/product')->load($parentProducts[0]);
				$productUrl = $parentProduct->getProductUrl();
			}
		}
	}

?>
					<td valign="top"> <table border="0" align="left" cellpadding="0" cellspacing="0" width="100%"> <tr> <td class="item-image" valign="top" width="96" style="padding-right:10px"> <a href="<?php echo $productUrl; ?>"> <img class="" src="<?php echo $productImageUrl ; ?>" alt="<?php echo $productName; ?>" style="max-width: 96px; outline: none;display: block; max-height: 100px; margin-left: auto; margin-right: auto;"> </a> </td> <td class="item-info" valign="top" align="left"> <table border="0" align="left" cellpadding="0" cellspacing="0" width="100%"> <tr> <td valign="top" align="left" class="item-name"> <a href="<?php echo $productUrl; ?>"> <?php echo $productName; ?> </a> </td> </tr> <?php if ($this->getItemOptions()): ?><tr> <td class="item-options" style="padding-bottom:5px;"><dl style="margin:0; padding:0;"><?php foreach ($this->getItemOptions() as $option): ?><dt><strong><em><?php echo $option['label'] ?></em></strong></dt><dd style="margin:0; padding:0 0 0 9px;"><?php echo nl2br($option['value']) ?></dd><?php endforeach; ?></dl> </td> </tr><?php endif; ?> </table> </td> </tr></tbody></table></td>
<?php endforeach; ?>
				</tr>
			</tbody>
		</table>
	</td>
</tr>
<tr>
	<td style="padding-top: 15px; padding-bottom: 15px;" class="wrapper-padding">
		<div style="background-color:rgb(214,214,214);font-size:1px;height:1px"></div>
	</td>
</tr>
<?php endif; ?>
<?php endif; ?>
